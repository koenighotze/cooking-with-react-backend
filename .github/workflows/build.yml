name: Build main

on:
  push:
    branches: [main]
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  download-dependencies:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache local Maven repository
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: /root/.m2/repository
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_KEY }}-
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
      - name: Resolve dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          ./mvnw -B dependency:go-offline
          ./mvnw -B verify -DskipTests || true  

  security-scan-code:
    runs-on: ubuntu-20.04
    needs:
      - download-dependencies
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: /root/.m2/repository
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}-${{ hashFiles('**/pom.xml') }}
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@0.3.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
      - name: Run vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.8.0
        with:
          scan-type: "fs"
          ignore-unfixed: false
          format: "table"
          exit-code: "1"
          severity: "CRITICAL"

  integration-test:
    runs-on: ubuntu-20.04
    needs:
      - download-dependencies
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: /root/.m2/repository
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}-${{ hashFiles('**/pom.xml') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
      - name: Unit Test
        run: ./mvnw -B -DskipUnitTests integration-test failsafe:verify

  unit-test:
    runs-on: ubuntu-20.04
    needs:
      - download-dependencies
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: /root/.m2/repository
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}-${{ hashFiles('**/pom.xml') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
      - name: Unit Test
        run: ./mvnw -B -DskipIntegrationTests test jacoco:report

  lint:
    runs-on: ubuntu-20.04
    needs:
      - download-dependencies
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: /root/.m2/repository
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}-${{ hashFiles('**/pom.xml') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
      - name: Lint Kotlin
        run: ./mvnw -B ktlint:check
      - name: Run static analysis
        run: ./mvn detekt:check -Ddetekt.config=detekt.yml

  build:
    runs-on: ubuntu-20.04
    needs:
      - lint
      - unit-test
      - security-scan-code
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: /root/.m2/repository
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}-${{ hashFiles('**/pom.xml') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
      - name: Build
        run: ./mvnw --batch-mode --update-snapshots package
      - name: Upload coverage
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh)
        env:
          CODACY_PROJECT_NAME: cooking-with-react-backend
          CODACY_ORGANIZATION_PROVIDER: gh
          CODACY_USERNAME: ${{ github.repository_owner }}
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}

